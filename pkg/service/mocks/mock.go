// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	models "github.com/MIHAIL33/Service-Nats-streaming/model"
	gomock "github.com/golang/mock/gomock"
)

// MockModel is a mock of Model interface.
type MockModel struct {
	ctrl     *gomock.Controller
	recorder *MockModelMockRecorder
}

// MockModelMockRecorder is the mock recorder for MockModel.
type MockModelMockRecorder struct {
	mock *MockModel
}

// NewMockModel creates a new mock instance.
func NewMockModel(ctrl *gomock.Controller) *MockModel {
	mock := &MockModel{ctrl: ctrl}
	mock.recorder = &MockModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModel) EXPECT() *MockModelMockRecorder {
	return m.recorder
}

// AddAllInCache mocks base method.
func (m *MockModel) AddAllInCache() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAllInCache")
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAllInCache indicates an expected call of AddAllInCache.
func (mr *MockModelMockRecorder) AddAllInCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAllInCache", reflect.TypeOf((*MockModel)(nil).AddAllInCache))
}

// Create mocks base method.
func (m *MockModel) Create(model models.Model) (*models.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", model)
	ret0, _ := ret[0].(*models.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockModelMockRecorder) Create(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockModel)(nil).Create), model)
}

// Delete mocks base method.
func (m *MockModel) Delete(id string) (*models.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*models.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockModelMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockModel)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockModel) GetAll() (*[]models.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(*[]models.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockModelMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockModel)(nil).GetAll))
}

// GetAllFromCache mocks base method.
func (m *MockModel) GetAllFromCache() (*[]models.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFromCache")
	ret0, _ := ret[0].(*[]models.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFromCache indicates an expected call of GetAllFromCache.
func (mr *MockModelMockRecorder) GetAllFromCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFromCache", reflect.TypeOf((*MockModel)(nil).GetAllFromCache))
}

// GetById mocks base method.
func (m *MockModel) GetById(id string) (*models.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*models.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockModelMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockModel)(nil).GetById), id)
}

// GetModelFromCacheById mocks base method.
func (m *MockModel) GetModelFromCacheById(id string) (*models.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelFromCacheById", id)
	ret0, _ := ret[0].(*models.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelFromCacheById indicates an expected call of GetModelFromCacheById.
func (mr *MockModelMockRecorder) GetModelFromCacheById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelFromCacheById", reflect.TypeOf((*MockModel)(nil).GetModelFromCacheById), id)
}
